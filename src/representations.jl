struct Unipotent end
struct Weyl end

abstract type AbstractRepresentation{T} end

####
# Principal series

struct PrincipalRepr{K, T, GL <: AbstractGL‚ÇÇ} <: AbstractRepresentation{T}
    character::Dict{K ,T}
    borel_cd::CosetDecomposition{GL, Borel{GL}}

    function PrincipalRepr(Œ±_œàŒ±::Pair{G, T}, boreldec::CosetDecomposition{GL ,Borel{GL}}) where {G, T, q, GL <: AbstractGL‚ÇÇ{q}}
        @assert length(boreldec) == q + 1
        Œ±, œàŒ± = Œ±_œàŒ±
        new{G, T, GL}(Dict(Œ±^j => œàŒ±^j for j in 1:q), boreldec)
    end
end

degree(œ±::PrincipalRepr{GF{q}, T, SL‚ÇÇ{q}}) where {q, T} = q + 1

function Base.show(io::IO, œ±::PrincipalRepr{GF{q} ,T, GL}) where {q, T, GL}
    Œ± = generator(first(first(œ±.character)))
    println(io, "Principal series representation of $GL")
    print(io, "\tcharacter of ùîΩ$(subscriptify(q))À£: ", Œ±, " ‚Üí ", œ±.character[Œ±])
end

function (œ±::PrincipalRepr{GF{q}, T, SL‚ÇÇ{q}})(m::SL‚ÇÇ{q}) where {q, T}
    # for now only for SL‚ÇÇ
    u, w, D, U = bruhat(m)
    isone(w) && return œ±(D, Diagonal) * œ±(U, Unipotent)
    return œ±(u, Unipotent) * œ±(w, Weyl) * œ±(D, Diagonal) * œ±(U, Unipotent)
end

function (œ±::PrincipalRepr{GF{q}, T, SL‚ÇÇ{q}})(U::SL‚ÇÇ{q}, ::Type{Unipotent},) where {q, T}
    II = one(last(first(œ±.character)))
    œ±U = fill(zero(II), degree(œ±), degree(œ±))
    for (i, pi) in zip(1:degree(œ±), right_action(U, œ±.borel_cd))
        œ±U[i, pi] = II
    end
    return œ±U
end

function (œ±::PrincipalRepr{GF{q}, T, SL‚ÇÇ{q}})(D::SL‚ÇÇ{q}, ::Type{Diagonal}) where {q ,T}
    a = D[1]
    œàa = œ±.character[a]
    œàa_inv = inv(œàa)
    œ±D = fill(zero(œàa), degree(œ±), degree(œ±))

    perm_repr = right_action(D, œ±.borel_cd)
    for (i, pi) in zip(1:degree(œ±), perm_repr)
        if œ±.borel_cd[i] ‚àà œ±.borel_cd.trivial_coset
            œ±D[i, pi] = œàa
        else
            œ±D[i, pi] = œàa_inv
        end
    end
    return œ±D
end

function (œ±::PrincipalRepr{GF{q}, T})(w::SL‚ÇÇ{q}, ::Type{Weyl}) where {q, T}
    II = one(last(first(œ±.character)))
    œ±w = fill(zero(II), degree(œ±), degree(œ±))
    perm_repr = right_action(w, œ±.borel_cd)
    for (i, pi) in zip(1:degree(œ±), perm_repr)
        if œ±.borel_cd[i] ‚àà œ±.borel_cd.trivial_coset
            œ±w[i, pi] = œ±.character[GF{q}(-1)] # œà(-1)
        elseif w * œ±.borel_cd[-i] ‚àà œ±.borel_cd.trivial_coset
            œ±w[i, pi] = II # œà(1)
        else
            repr = œ±.borel_cd[i]
            # [ c    0 ][ 1 -a/c ][ a b ] =  [ 0    1 ]
            # [ 0 -1/c ][ 0    1 ][ c d ]    [-1 -d/c ]
            c, d = repr[2], repr[4]
            # we deal with the trivial coset above
            @assert !iszero(c)
            # we deal with the coset of w above
            @assert !iszero(d)
            u = -d / c
            œ±w[i, pi] = œ±.character[inv(u)]
        end
    end
    return œ±w
end

####
# Discrete series

struct DiscreteRepr{K, T, GL, Œµ} <: AbstractRepresentation{T}
    decomposable::Dict{K, T}
    indecomposable::Dict{QuadraticExt{Œµ, K}, T}
    basis::Dict{K, Int}
    function DiscreteRepr(Œ±_œáŒ±::Pair{GF{q}, T}, Œ≤_ŒΩŒ≤::Pair{QuadraticExt{Œµ, GF{q}}, T},
        basis=Dict(generator(first(Œ±_œáŒ±))^i => i for i in 1:q - 1)) where {q, T, Œµ}

        @assert length(basis) == q - 1 "Basis should be KÀ£"
        @assert !isone(last(Œ±_œáŒ±)) "Œ±_œáŒ± should be a non-trivial character of K‚Å∫"
        @assert isone(first(Œ±_œáŒ±)) "Œ±_œáŒ± should be a non-trivial character of K‚Å∫"

        decomposable = Dict(i * first(Œ±_œáŒ±) => last(Œ±_œáŒ±)^i for i in 0:q - 1)
        indecomposable = Dict(generator(first(Œ≤_ŒΩŒ≤))^i => last(Œ≤_ŒΩŒ≤)^i for i in 1:q^2 - 1)
        @assert any(!isone,(indecomposable[u] for u in RamanujanGraphs.Units(first(Œ≤_ŒΩŒ≤))),
            ) "Œ≤_ŒΩŒ≤ should be a non-trivial character of LÀ£"
        return new{GF{q}, T, SL‚ÇÇ{q}, Œµ}(decomposable, indecomposable, basis)
    end
end

degree(œ±::DiscreteRepr{GF{q}, T, SL‚ÇÇ{q}}) where {q, T} = q - 1
basis(œ±::DiscreteRepr) = œ±.basis

function Base.show(io::IO, œ±::DiscreteRepr{GF{q}, T, GL}) where {q, T, GL}
    œá = œ±.decomposable
    ŒΩ = œ±.indecomposable
    q_idx = subscriptify(q)
    Œ≤ = generator(first(first(ŒΩ)))
    println(io, "Discrete series representation of $GL")
    println(io, "\tcharacter of ùîΩ$(q_idx): ", GF{q}(1), " ‚Üí ", œá[GF{q}(1)])
    println(io, "\tcharacter of ùîΩ$(q_idx)(‚àö$(sqroot(Œ≤))À£: ", Œ≤, " ‚Üí ", ŒΩ[Œ≤])
end

function (œ±::DiscreteRepr{GF{q}, T, SL‚ÇÇ{q}})(m::SL‚ÇÇ{q}) where {q, T}
    # for now only for SL‚ÇÇ
    B = Bruhat(m)
    isupper(m) && return œ±(B.D, Diagonal) * œ±(B.U, Unipotent)
    return œ±(B.u, Unipotent) * œ±(B.w, Weyl) * œ±(B.D, Diagonal) * œ±(B.U, Unipotent)
end

function (œ±::DiscreteRepr{GF{q}, T, SL‚ÇÇ{q}})(U::SL‚ÇÇ{q}, ::Type{Unipotent}) where {q, T}
    b = U[3]
    œá = œ±.decomposable
    œ±U = fill(zero(last(first(œá))), degree(œ±), degree(œ±))
    for (x, i) in basis(œ±)
        œ±U[i, i] = œá[x*b]
    end
    return œ±U
end

function (œ±::DiscreteRepr{GF{q}, T, SL‚ÇÇ{q}, Œµ})(D::SL‚ÇÇ{q}, ::Type{Diagonal}) where {q, T, Œµ}
    a¬≤ = D[1]^2
    d = D[4]
    œá = œ±.decomposable
    ŒΩ = œ±.indecomposable
    œ±D = fill(zero(last(first(œá))), degree(œ±), degree(œ±))
    for (x, i) in basis(œ±)
        œ±D[i, basis(œ±)[a¬≤*x]] = ŒΩ[QuadraticExt{Œµ}(d, zero(d))]
    end
    return œ±D
end

function _j(z::GF{q}, œá, ŒΩ) where {q}
    tmp = first(first(ŒΩ))
    w = _elt_of_norm(tmp, z)
    res = zero(last(first(ŒΩ)))
    for u in Units(tmp)
        t = w * u
        res += œá[real(t + t^q)] * ŒΩ[t]
    end
    return res / oftype(res, q)
    # L = keys(ŒΩ)
    # return sum(œá[real(t+t^q)]*ŒΩ[t] for t in L if norm(t) == z)//q
end

function (œ±::DiscreteRepr{GF{q}, T, SL‚ÇÇ{q}, Œµ})(w::SL‚ÇÇ{q}, ::Type{Weyl}) where {q, T, Œµ}
    œá = œ±.decomposable
    ŒΩ = œ±.indecomposable
    œ±w = fill(zero(last(first(œá))), degree(œ±), degree(œ±))
    for (y, j) in basis(œ±)
        ŒΩy¬Ø¬π = ŒΩ[QuadraticExt{Œµ}(inv(y), zero(y))]
        for (x, i) in basis(œ±)
            œ±w[i, j] += -ŒΩy¬Ø¬π * _j(x * y, œá, ŒΩ)
        end
    end
    return œ±w
end
